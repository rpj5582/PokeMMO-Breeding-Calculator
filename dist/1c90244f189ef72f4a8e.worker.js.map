{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/Pokemon.ts","webpack:///./src/BreedingNode.ts","webpack:///./src/BreedingTreeFinder.ts","webpack:///./src/worker/worker.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Pokemon","stats","gender","nature","this","copy","pokemon","filter","stat","length","equals","thisStatsFiltered","otherStatsFiltered","statsEqual","findPokemonInStartingPool","pokemonPool","BreedingNode","parent","left","right","defineGender","breedingNode","calculateNodeCost","startingPokemonPool","console","log","pokemonIndex","splice","sibling","cost","BreedingTreeFinder_BreedingTreeFinder","BreedingTreeFinder","trees","bestTree","treeFinder","treeFinderCopy","decomposePokemon","pokemonNode","useCopy","combinationOutput","combinationLength","Math","max","rank","calcCombinations","innerCombinationOutput","breedingNodeMale","undefined","breedingNodeFemale","leftPokemon","rightPokemon","push","calculateBestTree","lowestCost","Infinity","lowestCostIndex","startingPokemonPoolCopy","slice","treeCost","tree","getTree","index","input","len","start","output","startLen","result","ctx","self","findBestBreedingTree","desiredPokemon","rebuitObjects","desiredPokemonCopy","pokemonCopy","rebuildObjects","desiredNode","postMessage","onmessage","e","data"],"mappings":"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","file":"1c90244f189ef72f4a8e.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\"use strict\";\r\n\r\ntype Gender = \"Genderless\" | \"Male\" | \"Female\";\r\ntype Nature = \"Unknown Nature\"; // TODO: Fill in all natures\r\n\r\nclass Pokemon {\r\n    readonly gender: Gender = \"Genderless\";\r\n    readonly nature: Nature = \"Unknown Nature\";\r\n    readonly stats: number[] = [0, 0, 0, 0, 0, 0];\r\n\r\n    constructor(stats: number[], gender?: Gender, nature?: Nature) {\r\n        this.stats = stats;\r\n        this.gender = gender || this.gender;\r\n        this.nature = nature || this.nature;\r\n    }\r\n\r\n    static copy(pokemon: Pokemon): Pokemon {\r\n        return new Pokemon(pokemon.stats, pokemon.gender, pokemon.nature);\r\n    }\r\n\r\n    get rank(): number {\r\n        return this.stats.filter(stat => stat > 0).length - 1;\r\n    }\r\n\r\n    equals(pokemon: Pokemon): boolean {\r\n        const thisStatsFiltered: number[] = this.stats.filter(stat => stat > 0);\r\n        const otherStatsFiltered: number[] = pokemon.stats.filter(stat => stat > 0);\r\n\r\n        let statsEqual: boolean = true;\r\n        if (thisStatsFiltered.length === otherStatsFiltered.length) {\r\n            for (let i = 0; i < this.stats.length; i++) {\r\n                if (thisStatsFiltered[i] != otherStatsFiltered[i]) {\r\n                    statsEqual = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (statsEqual) {\r\n                if (this.gender === pokemon.gender && this.nature === pokemon.nature)\r\n                    return true;\r\n\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // Finds an identical pokemon from the given pool. Returns the index of the pokemon in the pool or null if none is found.\r\n    findPokemonInStartingPool(pokemonPool: Pokemon[]): number {\r\n        for (let i = 0; i < pokemonPool.length; i++) {\r\n            if (this.equals(pokemonPool[i])) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n}\r\n\r\nexport { Pokemon, Gender, Nature };","\"use strict\";\r\n\r\nimport { Pokemon } from \"./Pokemon\";\r\n\r\ntype Nullable<T> = T | null | undefined;\r\n\r\nclass BreedingNode {\r\n    readonly pokemon: Pokemon;\r\n    readonly parent: Nullable<BreedingNode>;\r\n    left: Nullable<BreedingNode>;\r\n    right: Nullable<BreedingNode>;\r\n    private defineGender: boolean = false;\r\n\r\n    constructor(pokemon: Pokemon, parent?: Nullable<BreedingNode>, left?: Nullable<BreedingNode>, right?: Nullable<BreedingNode>) {\r\n        this.pokemon = pokemon;\r\n        this.parent = parent;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n\r\n    static copy(breedingNode: BreedingNode): BreedingNode {\r\n        const copy = new BreedingNode(breedingNode.pokemon, breedingNode.parent, breedingNode.left, breedingNode.right);\r\n        copy.defineGender = breedingNode.defineGender;\r\n\r\n        return copy;\r\n    }\r\n\r\n    calculateNodeCost(startingPokemonPool: Pokemon[]): number {\r\n        // Recursive end check\r\n        if (!this.left || !this.right) {\r\n            return 0;\r\n        }\r\n\r\n        // Check if this is a valid breed\r\n        if (this.left.pokemon.gender === this.right.pokemon.gender && this.left.pokemon.gender != \"Genderless\") {\r\n            console.log(\"Error calculating cost: invalid pokemon combination \" + this.left + \" and \" + this.right + \" for pokemon \" + this.pokemon);\r\n            return 0;\r\n        }\r\n\r\n        const pokemonIndex = this.pokemon.findPokemonInStartingPool(startingPokemonPool);\r\n        if (pokemonIndex > -1) {\r\n            console.log(\"Saved money by using the following pokemon from starting pool.\");\r\n            console.log(startingPokemonPool[pokemonIndex]);\r\n            startingPokemonPool.splice(pokemonIndex, 1);\r\n            return 0;\r\n        }\r\n\r\n        // If this node is not the root note (aka if it has a parent), then check the sibling node to determine cost.\r\n        if (this.parent) {\r\n            // Get a reference to this breed's sibling breed\r\n            const sibling = this.parent.left === this ? this.parent.right : this.parent.left;\r\n\r\n            // If the sibling doesn't have a defined gender, require this one to have a defined gender.\r\n            if (sibling && !sibling.defineGender)\r\n                this.defineGender = true;\r\n        }\r\n\r\n        let cost = 20000;\r\n        if (this.defineGender)\r\n            cost += 5000;\r\n\r\n        const leftCost = this.left.calculateNodeCost(startingPokemonPool);\r\n        const rightCost = this.right.calculateNodeCost(startingPokemonPool);\r\n\r\n        return cost + leftCost + rightCost;\r\n    }\r\n}\r\n\r\nexport { BreedingNode, Nullable };\r\n","\"use strict\";\r\n\r\nimport { Pokemon } from \"./Pokemon\";\r\nimport { BreedingNode, Nullable } from \"./BreedingNode\";\r\n\r\ninterface BestTree {\r\n    tree: BreedingNode;\r\n    cost: number;\r\n}\r\n\r\nclass BreedingTreeFinder {\r\n    private trees: BreedingNode[] = [];\r\n    private bestTree: Nullable<BestTree>;\r\n\r\n    constructor() {\r\n        this.bestTree = null;\r\n    }\r\n\r\n    static copy(treeFinder: BreedingTreeFinder): BreedingTreeFinder {\r\n        const treeFinderCopy = new BreedingTreeFinder();\r\n        treeFinderCopy.trees = treeFinder.trees;\r\n        treeFinderCopy.bestTree = treeFinder.bestTree;\r\n\r\n        return treeFinderCopy;\r\n    }\r\n\r\n    // Breaks down a desired pokemon recursively into all possible trees.\r\n    // Only use a copy on the root node so that the trees don't share nodes, but the nodes within the same tree are connected properly.\r\n    decomposePokemon(pokemonNode: BreedingNode, useCopy: boolean): void {\r\n        // Creates the array of output and sets the length to the rank of the pokemon.\r\n        const combinationOutput: number[][] = [];\r\n        const combinationLength = Math.max(pokemonNode.pokemon.rank, 0);\r\n\r\n        if (combinationLength == 0) {\r\n            return;\r\n        }\r\n\r\n        // Calculate all combinations of the calculated length of the pokemon's stats array.\r\n        calcCombinations(pokemonNode.pokemon.stats.filter(stat => stat > 0), combinationLength, 0, combinationOutput);\r\n\r\n        // Once all the combinations are calculated, find all pairwise combinations from the results.\r\n        // This will give all possible combinations of pokemon stats that would result in this pokemon.\r\n        const innerCombinationOutput: any = [];\r\n        calcCombinations(combinationOutput, 2, 0, innerCombinationOutput);\r\n\r\n        const trees: BreedingNode[] = [];\r\n\r\n        for (var i = 0; i < innerCombinationOutput.length; i++) {\r\n            // The left and right nodes for every node can be either male/female or female/male.\r\n            // Therefore, create two nodes, one for each case.\r\n            let breedingNodeMale: Nullable<BreedingNode> = undefined;\r\n            let breedingNodeFemale: Nullable<BreedingNode> = undefined;\r\n\r\n            if (useCopy) {\r\n                breedingNodeMale = new BreedingNode(pokemonNode.pokemon, pokemonNode.parent, null, null);\r\n\r\n                // Genderless pokemon only need one breeding node.\r\n                if (pokemonNode.pokemon.gender != \"Genderless\") {\r\n                    breedingNodeFemale = new BreedingNode(pokemonNode.pokemon, pokemonNode.parent, null, null);\r\n                }\r\n            }\r\n            else {\r\n                if (pokemonNode.pokemon.gender === \"Male\") {\r\n                    breedingNodeMale = pokemonNode;\r\n                    breedingNodeFemale = new BreedingNode(pokemonNode.pokemon, pokemonNode.parent, null, null);\r\n                }\r\n                else if (pokemonNode.pokemon.gender === \"Female\") {\r\n                    breedingNodeMale = new BreedingNode(pokemonNode.pokemon, pokemonNode.parent, null, null);\r\n                    breedingNodeFemale = pokemonNode;\r\n                }\r\n                else {\r\n                    // Assume genderless pokemon, so only one breeding node needs to be created.\r\n                    breedingNodeMale = pokemonNode;\r\n                }\r\n            }\r\n\r\n            // Assigns two new pokemon from the combination output.\r\n            if (breedingNodeFemale) {\r\n                let leftPokemon = new Pokemon(innerCombinationOutput[i][0], \"Male\");\r\n                let rightPokemon = new Pokemon(innerCombinationOutput[i][1], \"Female\");\r\n\r\n                breedingNodeMale.left = new BreedingNode(leftPokemon, breedingNodeMale, null, null);\r\n                breedingNodeMale.right = new BreedingNode(rightPokemon, breedingNodeMale, null, null);\r\n\r\n                trees.push(breedingNodeMale);\r\n\r\n                // Recursively decompose the left and right breeding nodes.\r\n                this.decomposePokemon(breedingNodeMale.left, false);\r\n                this.decomposePokemon(breedingNodeMale.right, false);\r\n\r\n                leftPokemon = new Pokemon(innerCombinationOutput[i][0], \"Female\");\r\n                rightPokemon = new Pokemon(innerCombinationOutput[i][1], \"Male\");\r\n\r\n                breedingNodeFemale.left = new BreedingNode(leftPokemon, breedingNodeFemale, null, null);\r\n                breedingNodeFemale.right = new BreedingNode(rightPokemon, breedingNodeFemale, null, null);\r\n\r\n                trees.push(breedingNodeFemale);\r\n\r\n                this.decomposePokemon(breedingNodeFemale.left, false);\r\n                this.decomposePokemon(breedingNodeFemale.right, false);\r\n            }\r\n            else {\r\n                let leftPokemon = new Pokemon(innerCombinationOutput[i][0], \"Genderless\");\r\n                let rightPokemon = new Pokemon(innerCombinationOutput[i][1], \"Genderless\");\r\n\r\n                breedingNodeMale.left = new BreedingNode(leftPokemon, breedingNodeMale, null, null);\r\n                breedingNodeMale.right = new BreedingNode(rightPokemon, breedingNodeMale, null, null);\r\n\r\n                trees.push(breedingNodeMale);\r\n\r\n                this.decomposePokemon(breedingNodeMale.left, false);\r\n                this.decomposePokemon(breedingNodeMale.right, false);\r\n            }\r\n        }\r\n\r\n        this.trees = trees;\r\n    }\r\n\r\n    calculateBestTree(startingPokemonPool: Pokemon[]): BestTree {\r\n        let lowestCost: number = Infinity;\r\n        let lowestCostIndex: number = -1;\r\n\r\n        for (let i = 0; i < this.trees.length; i++) {\r\n            const startingPokemonPoolCopy = startingPokemonPool.slice();\r\n            let treeCost = this.trees[i].calculateNodeCost(startingPokemonPoolCopy);\r\n\r\n            if (treeCost < lowestCost) {\r\n                lowestCost = treeCost;\r\n                lowestCostIndex = i;\r\n            }\r\n        }\r\n\r\n        console.log(\"Lowest cost tree index: \" + lowestCostIndex);\r\n\r\n        this.bestTree = {\r\n            \"tree\": this.trees[lowestCostIndex],\r\n            \"cost\": lowestCost\r\n        }\r\n\r\n        return this.bestTree;\r\n    }\r\n\r\n    getTree(index: number): BreedingNode {\r\n        return this.trees[index];\r\n    }\r\n}\r\n\r\n// Returns all combinations of a given length from a supplied set of data.\r\nfunction calcCombinations(input: any, len: number, start: number, output: any, startLen?: number, result?: number[]): void {\r\n    if (startLen === undefined)\r\n        startLen = len;\r\n\r\n    if (result === undefined) {\r\n        result = [];\r\n        result.length = startLen;\r\n    }\r\n\r\n    if (len === 0) {\r\n        output.push(result.slice());\r\n        return;\r\n    }\r\n\r\n    for (let i = start; i <= input.length - len; i++) {\r\n        result[result.length - len] = input[i];\r\n        calcCombinations(input, len - 1, i + 1, output, startLen, result);\r\n    }\r\n}\r\n\r\nexport { BreedingTreeFinder, BestTree };","\"use strict\";\r\n\r\nconst ctx: Worker = self as any;\r\n\r\nimport { Pokemon } from \"../Pokemon\";\r\nimport { BreedingNode } from \"../BreedingNode\";\r\nimport { BreedingTreeFinder, BestTree } from \"../BreedingTreeFinder\";\r\n\r\nfunction rebuildObjects(treeFinder: BreedingTreeFinder, desiredPokemon: Pokemon, startingPokemonPool: Pokemon[]) {\r\n    const treeFinderCopy = BreedingTreeFinder.copy(treeFinder);\r\n    const desiredPokemonCopy = Pokemon.copy(desiredPokemon);\r\n    const startingPokemonPoolCopy = [];\r\n    for (let i = 0; i < startingPokemonPool.length; i++) {\r\n        const pokemon = startingPokemonPool[i];\r\n        const pokemonCopy = Pokemon.copy(pokemon);\r\n        startingPokemonPoolCopy.push(pokemonCopy);        \r\n    }\r\n\r\n    return {\r\n        treeFinder: treeFinderCopy,\r\n        desiredPokemon: desiredPokemonCopy,\r\n        startingPokemonPool: startingPokemonPoolCopy\r\n    };\r\n}\r\n\r\nfunction findBestBreedingTree(treeFinder: BreedingTreeFinder, desiredPokemon: Pokemon, startingPokemonPool: Pokemon[]): void {\r\n    const rebuitObjects = rebuildObjects(treeFinder, desiredPokemon, startingPokemonPool);\r\n    \r\n    const desiredNode = new BreedingNode(rebuitObjects.desiredPokemon, null, null, null);\r\n\r\n    rebuitObjects.treeFinder.decomposePokemon(desiredNode, true);\r\n    const bestTree: BestTree = rebuitObjects.treeFinder.calculateBestTree(rebuitObjects.startingPokemonPool);\r\n\r\n    ctx.postMessage({ treeFinder: rebuitObjects.treeFinder, bestTree: bestTree });\r\n}\r\n\r\nctx.onmessage = (e: MessageEvent) => {\r\n    findBestBreedingTree(e.data.treeFinder, e.data.desiredPokemon, e.data.startingPokemonPool);\r\n};"],"sourceRoot":""}